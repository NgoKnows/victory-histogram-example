{"version":3,"sources":["Slider.js","App.js","serviceWorker.js","index.js"],"names":["isTouchEvent","event","undefined","touches","Container","styled","div","UnfilledBar","ColoredBar","attrs","percentage","style","width","color","CircleTransitionContainer","value","transform","Circle","BiggerCircle","dragging","TooltipTransitionContainer","Tooltip","Triangle","Slider","state","props","maxValue","previousValueProp","handleDrag","ev","left","ref","getBoundingClientRect","sliderWidth","clientWidth","location","clientX","newPercentage","clamp","window","requestAnimationFrame","setState","onChange","handleDragDone","handleDragStart","getTooltipText","tooltipValues","length","index","Math","round","key","addEventListener","this","onMouseDown","onTouchStart","React","defaultProps","data","1990","data1990","1991","data1991","1992","data1992","1993","data1993","1994","data1994","1995","data1995","1996","data1996","1997","data1997","1998","data1998","1999","data1999","2000","data2000","2001","data2001","2002","data2002","2003","data2003","2004","data2004","2005","data2005","2006","data2006","2007","data2007","2008","data2008","2009","data2009","2010","data2010","2011","data2011","2012","data2012","2013","data2013","2014","data2014","2015","data2015","2016","data2016","2017","data2017","2018","data2018","2019","data2019","white","Card","yearToSeason","year","slice","YEARS","Object","keys","map","parseInt","SliderContainer","setYear","useState","percent","setPercent","p","calculatedYear","LAST_YEAR","getYear","App","className","id","x1","y1","x2","y2","offset","stopColor","text","x","y","textAnchor","fill","axis","stroke","tickLabels","fontSize","grid","pointerEvents","strokeWidth","dependentAxis","cornerRadius","domain","animate","duration","bins","_","range","mixBlendMode","vectorEffect","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6a734ad.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { clamp } from \"lodash\";\nimport styled from \"styled-components\";\n\n// type IProps = Readonly<{\n//   value: number;\n//   maxValue: number;\n//   tooltipValues: string[];\n//   onChange: (value: number) => void;\n//   color: string;\n// }>;\n\n// type IState = Readonly<{\n//   dragging: boolean;\n//   percentage: number;\n//   previousValueProp: number;\n// }>;\n\nconst BAR_HEIGHT = 10;\n\nfunction isTouchEvent(event) {\n  return event.touches !== undefined;\n}\n\nconst Container = styled.div`\n  width: 100%;\n  cursor: pointer;\n  user-drag: none;\n  user-select: none;\n  height: 7px;\n  padding: 40px 0;\n  position: relative;\n`;\n\nconst UnfilledBar = styled.div`\n  position: absolute;\n  height: ${BAR_HEIGHT}px;\n  width: 100%;\n  margin-top: 10px;\n  background-color: grey;\n  border-radius: 6px;\n`;\n\nconst ColoredBar = styled.div.attrs(({ percentage }) => ({\n  style: {\n    width: `${percentage * 100}%`,\n  },\n}))`\n  position: absolute;\n  height: ${BAR_HEIGHT}px;\n  width: 100%;\n  margin-top: 10px;\n  cursor: pointer;\n  transform-origin: 0 0;\n  background-color: ${({ color }) => color};\n  border-radius: 6px;\n  transition: width 0.55s ease-out;\n`;\n\nconst CircleTransitionContainer = styled.div.attrs(({ value }) => ({\n  style: {\n    transform: `translateX(${value}%)`,\n  },\n}))`\n  width: 100%;\n  height: ${BAR_HEIGHT}px;\n  position: relative;\n`;\n\n// interface ICircleProps {\n//   color: string;\n// }\nconst Circle = styled.div`\n  position: absolute;\n  left: 0;\n  top: 50%;\n  height: 28px;\n  width: 28px;\n  cursor: pointer;\n  border-radius: 50%;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  background-color: ${({ color }) => color};\n  user-select: none;\n  z-index: 10;\n  transform: translate(-50%, -50%);\n`;\n\nconst BiggerCircle = styled.div`\n  position: absolute;\n  left: 0;\n  top: 50%;\n  height: 50px;\n  width: 50px;\n  border-radius: 50%;\n  cursor: pointer;\n  background-color: lightgrey;\n  opacity: ${({ dragging }) => (dragging ? 0.3 : 0)};\n  z-index: 9;\n  transform: translate(-50%, -50%);\n  transition: opacity 0.25s ease-out;\n  :hover,\n  ${Circle}:hover + & {\n    opacity: ${({ dragging }) => (dragging ? 0.3 : 0.2)};\n  }\n`;\n\nconst TooltipTransitionContainer = styled(CircleTransitionContainer)`\n  /* transition: transform 0.55s ease-out; */\n`;\n\n// interface ITooltipProps {\n//   dragging: boolean;\n//   color: string;\n// }\nconst Tooltip = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 100%;\n  display: flex;\n  justify-content: center;\n  background: ${({ color }) => color};\n  color: #fff;\n  text-align: center;\n  opacity: ${({ dragging }) => (dragging ? 0.9 : 0)};\n  padding: 20px;\n  pointer-events: none;\n  min-width: 40px;\n  z-index: 100;\n  box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.28);\n  transition: all 0.3s ease-out;\n  transform: translate(-50%, ${({ dragging }) => (dragging ? \"-25px\" : \"0px\")});\n  border-radius: 3px;\n  font-weight: bold;\n  font-size: 21px;\n`;\n\nconst Triangle = styled.div`\n  position: absolute;\n  left: 0;\n  border-left: solid transparent 12px;\n  border-right: solid transparent 12px;\n  border-top: solid ${({ color }) => color} 12px;\n  opacity: ${({ dragging }) => (dragging ? 1 : 0)};\n  transform: translate(-50%, ${({ dragging }) => (dragging ? \"-25px\" : \"0px\")});\n  transition: all 0.3s ease-out;\n`;\n\nexport default class Slider extends React.Component {\n  static defaultProps = {\n    tooltipValues: [],\n    color: \"palevioletred\",\n  };\n\n  static getDerivedStateFromProps({ value, maxValue }, { previousValueProp }) {\n    if (previousValueProp === value) {\n      return null;\n    }\n\n    return {\n      percentage: value / maxValue,\n      previousValueProp: value,\n    };\n  }\n\n  state = {\n    dragging: false,\n    percentage: this.props.value / this.props.maxValue,\n    previousValueProp: this.props.value,\n  };\n\n  ref: HTMLElement;\n\n  componentDidMount() {\n    window.addEventListener(\"mousemove\", this.handleDrag);\n    window.addEventListener(\"touchmove\", this.handleDrag);\n    window.addEventListener(\"touchend\", this.handleDragDone);\n    window.addEventListener(\"mouseup\", this.handleDragDone);\n  }\n\n  handleDrag = (ev) => {\n    if (this.state.dragging) {\n      const left = this.ref.getBoundingClientRect().left;\n      const sliderWidth = this.ref.clientWidth;\n      const location = isTouchEvent(ev)\n        ? ev.touches[0].clientX - left\n        : ev.clientX - left;\n\n      const newPercentage = clamp(location / sliderWidth, 0, 1);\n      window.requestAnimationFrame(() => {\n        this.setState({ percentage: newPercentage });\n        this.props.onChange(this.state.percentage * this.props.maxValue);\n      });\n    }\n  };\n\n  handleDragDone = () => {\n    this.setState({ dragging: false });\n    this.props.onChange(this.state.percentage * this.props.maxValue);\n  };\n\n  handleDragStart = (ev) => {\n    const left = this.ref.getBoundingClientRect().left;\n    const sliderWidth = this.ref.clientWidth;\n    const location = isTouchEvent(ev)\n      ? ev.touches[0].clientX - left\n      : ev.clientX - left;\n\n    const newPercentage = location / sliderWidth;\n\n    this.setState({ percentage: newPercentage, dragging: true });\n  };\n\n  getTooltipText = () => {\n    const { tooltipValues } = this.props;\n    const { percentage } = this.state;\n\n    const length = tooltipValues.length;\n\n    const index = Math.round((length - 1) * percentage);\n\n    return <div key={index}>{tooltipValues[index]}</div>;\n  };\n\n  render() {\n    const { color } = this.props;\n    const { dragging, percentage } = this.state;\n\n    return (\n      <Container\n        ref={(ref) => (this.ref = ref)}\n        onMouseDown={this.handleDragStart}\n        onTouchStart={this.handleDragStart}\n      >\n        <UnfilledBar />\n        <ColoredBar percentage={percentage} color={color} />\n\n        <TooltipTransitionContainer value={percentage * 100}>\n          <Tooltip dragging={true} color={color}>\n            {this.getTooltipText()}\n          </Tooltip>\n          <Triangle dragging={true} color={color} />\n        </TooltipTransitionContainer>\n\n        <CircleTransitionContainer value={percentage * 100}>\n          <Circle\n            color={color}\n            onMouseDown={this.handleDragStart}\n            onTouchStart={this.handleDragStart}\n          />\n          <BiggerCircle\n            dragging={dragging}\n            onMouseDown={this.handleDragStart}\n            onTouchStart={this.handleDragStart}\n          />\n        </CircleTransitionContainer>\n      </Container>\n    );\n  }\n}\n","import React, { useState, useMemo } from \"react\";\nimport {\n  VictoryChart,\n  VictoryHistogram,\n  VictoryAxis,\n  VictoryLabel,\n} from \"victory\";\nimport _ from \"lodash\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport data1990 from \"./data/1990-91.json\";\nimport data1991 from \"./data/1991-92.json\";\nimport data1992 from \"./data/1992-93.json\";\nimport data1993 from \"./data/1993-94.json\";\nimport data1994 from \"./data/1994-95.json\";\nimport data1995 from \"./data/1995-96.json\";\nimport data1996 from \"./data/1996-97.json\";\nimport data1997 from \"./data/1997-98.json\";\nimport data1998 from \"./data/1998-99.json\";\nimport data1999 from \"./data/1999-00.json\";\nimport data2000 from \"./data/2000-01.json\";\nimport data2001 from \"./data/2001-02.json\";\nimport data2002 from \"./data/2002-03.json\";\nimport data2003 from \"./data/2003-04.json\";\nimport data2004 from \"./data/2004-05.json\";\nimport data2005 from \"./data/2005-06.json\";\nimport data2006 from \"./data/2006-07.json\";\nimport data2007 from \"./data/2007-08.json\";\nimport data2008 from \"./data/2008-09.json\";\nimport data2009 from \"./data/2009-10.json\";\nimport data2010 from \"./data/2010-11.json\";\nimport data2011 from \"./data/2011-12.json\";\nimport data2012 from \"./data/2012-13.json\";\nimport data2013 from \"./data/2013-14.json\";\nimport data2014 from \"./data/2014-15.json\";\nimport data2015 from \"./data/2015-16.json\";\nimport data2016 from \"./data/2016-17.json\";\nimport data2017 from \"./data/2017-18.json\";\nimport data2018 from \"./data/2018-19.json\";\nimport data2019 from \"./data/2019-20.json\";\nimport Foo from \"./Slider\";\n\nconst data = {\n  1990: data1990,\n  1991: data1991,\n  1992: data1992,\n  1993: data1993,\n  1994: data1994,\n  1995: data1995,\n  1996: data1996,\n  1997: data1997,\n  1998: data1998,\n  1999: data1999,\n  2000: data2000,\n  2001: data2001,\n  2002: data2002,\n  2003: data2003,\n  2004: data2004,\n  2005: data2005,\n  2006: data2006,\n  2007: data2007,\n  2008: data2008,\n  2009: data2009,\n  2010: data2010,\n  2011: data2011,\n  2012: data2012,\n  2013: data2013,\n  2014: data2014,\n  2015: data2015,\n  2016: data2016,\n  2017: data2017,\n  2018: data2018,\n  2019: data2019,\n};\n\nconst white = \"#cfcfcf\";\nconst Container = styled.div`\n  background-color: #1a191e;\n  padding: 50px;\n`;\n\nconst Card = styled.div`\n  background-color: #24232a;\n  border-radius: 3px;\n  padding: 30px;\n`;\n\nconst yearToSeason = (year) => {\n  return `${year}-${(year + 1 + \"\").slice(2, 4)}`;\n};\n\nconst YEARS = Object.keys(data).map((year) => parseInt(year, 10));\nconst FIRST_YEAR = 1990;\nconst LAST_YEAR = 2019;\nconst TOTAL_YEARS = LAST_YEAR - FIRST_YEAR;\n\nfunction App() {\n  const [year, setYear] = useState(FIRST_YEAR);\n  return (\n    <Container className=\"App\">\n      <svg>\n        <defs>\n          <linearGradient id=\"gradient1\" x1=\"0%\" y1=\"0%\" x2=\"50%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#FFE29F\" />\n            <stop offset=\"47%\" stopColor=\"#FFA99F\" />\n            <stop offset=\"100%\" stopColor=\"#FF719A\" />\n          </linearGradient>\n        </defs>\n      </svg>\n      <Card>\n        <VictoryChart>\n          <VictoryLabel\n            text={`3pt Attempt Averages (${yearToSeason(year)})`}\n            x={225}\n            y={30}\n            textAnchor=\"middle\"\n            style={{ fill: white }}\n          />\n          <VictoryAxis\n            style={{\n              axis: {\n                stroke: \"transparent\",\n              },\n              tickLabels: {\n                fill: white,\n                fontSize: 12,\n              },\n              grid: {\n                fill: white,\n                stroke: white,\n                pointerEvents: \"painted\",\n                strokeWidth: 0.5,\n              },\n            }}\n            dependentAxis\n          />\n          <VictoryAxis\n            style={{\n              axis: {\n                stroke: \"transparent\",\n              },\n              tickLabels: {\n                fill: white,\n                fontSize: 12,\n              },\n            }}\n          />\n          <VictoryHistogram\n            cornerRadius={2}\n            domain={{ y: [0, 150] }}\n            animate={{\n              duration: 400,\n            }}\n            data={data[year]}\n            bins={_.range(0, 16)}\n            style={{\n              data: {\n                stroke: \"transparent\",\n                fill: \"url(#gradient1)\",\n                strokeWidth: 1,\n                mixBlendMode: \"normal\",\n                vectorEffect: \"non-scaling-stroke\",\n              },\n            }}\n            x=\"3pa\"\n          />\n        </VictoryChart>\n      </Card>\n      <Slider year={year} setYear={setYear} />\n    </Container>\n  );\n}\n\nconst SliderContainer = styled.div`\n  background-color: #24232a;\n  margin-top: 24px;\n  padding: 80px 50px 50px;\n`;\n\nconst getYear = (percent) =>\n  Math.round(FIRST_YEAR + TOTAL_YEARS * (percent / 100));\n\nconst Slider = ({ year, setYear }) => {\n  const [percent, setPercent] = useState(0);\n\n  return (\n    <SliderContainer>\n      <Foo\n        onChange={(p) => {\n          setPercent(p);\n          const calculatedYear = getYear(percent);\n\n          if (year !== calculatedYear) {\n            setYear(calculatedYear);\n          }\n        }}\n        value={percent}\n        maxValue={100}\n        tooltipValues={YEARS.map((year) => yearToSeason(year))}\n      />\n    </SliderContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}